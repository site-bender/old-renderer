/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
import { BoxProps, CenterProps, ClusterProps, CoverProps, FrameProps, GridProps, LabelPosition, ReelProps, SidebarProps, StackProps, SwitcherProps, TopperProps } from "./types/props";
export namespace Components {
    interface BoxBender {
        /**
          * A box layout component
         */
        "config": BoxProps;
    }
    interface CenterBender {
        /**
          * A center layout component
         */
        "config": CenterProps;
    }
    interface ClusterBender {
        /**
          * A cluster layout component
         */
        "config": ClusterProps;
    }
    interface CoverBender {
        /**
          * A cover layout component
         */
        "config": CoverProps;
    }
    interface FieldWrapperBender {
        "componentId": string;
        /**
          * A wrapper around a form field
         */
        "helpVariant": LabelPosition;
        "label": string;
        "labelId": string;
        "message": string;
        "variant": LabelPosition;
    }
    interface FrameBender {
        /**
          * A frame layout component
         */
        "config": FrameProps;
    }
    interface GridBender {
        /**
          * A grid layout component
         */
        "config": GridProps;
    }
    interface HelpMessageBender {
        /**
          * A help message for a form field
         */
        "labelledBy": string;
        "message": string;
        "variant": LabelPosition;
    }
    interface LabelBender {
        "label": string;
        /**
          * A label for an element
         */
        "labelledId": string;
        "variant": LabelPosition;
    }
    interface ReelBender {
        /**
          * A reel layout component
         */
        "config": ReelProps;
    }
    interface SidebarBender {
        /**
          * A sidebar layout component
         */
        "config": SidebarProps;
    }
    interface SiteBender {
        /**
          * The unique train-case page name
         */
        "page": string;
    }
    interface StackBender {
        /**
          * A stack layout component
         */
        "config": StackProps;
    }
    interface SwitcherBender {
        /**
          * A switcher layout component
         */
        "config": SwitcherProps;
    }
    interface TextFieldBender {
        "componentId": string;
        /**
          * A text input element
         */
        "defaultValue": string;
        "label": string;
        "labelledBy": string;
        "message": string;
        "name": string;
    }
    interface TextInputBender {
        "componentId": string;
        /**
          * A text input element
         */
        "defaultValue": string;
        "labelledBy": string;
        "name": string;
    }
    interface TopperBender {
        /**
          * A topper layout component
         */
        "config": TopperProps;
    }
}
declare global {
    interface HTMLBoxBenderElement extends Components.BoxBender, HTMLStencilElement {
    }
    var HTMLBoxBenderElement: {
        prototype: HTMLBoxBenderElement;
        new (): HTMLBoxBenderElement;
    };
    interface HTMLCenterBenderElement extends Components.CenterBender, HTMLStencilElement {
    }
    var HTMLCenterBenderElement: {
        prototype: HTMLCenterBenderElement;
        new (): HTMLCenterBenderElement;
    };
    interface HTMLClusterBenderElement extends Components.ClusterBender, HTMLStencilElement {
    }
    var HTMLClusterBenderElement: {
        prototype: HTMLClusterBenderElement;
        new (): HTMLClusterBenderElement;
    };
    interface HTMLCoverBenderElement extends Components.CoverBender, HTMLStencilElement {
    }
    var HTMLCoverBenderElement: {
        prototype: HTMLCoverBenderElement;
        new (): HTMLCoverBenderElement;
    };
    interface HTMLFieldWrapperBenderElement extends Components.FieldWrapperBender, HTMLStencilElement {
    }
    var HTMLFieldWrapperBenderElement: {
        prototype: HTMLFieldWrapperBenderElement;
        new (): HTMLFieldWrapperBenderElement;
    };
    interface HTMLFrameBenderElement extends Components.FrameBender, HTMLStencilElement {
    }
    var HTMLFrameBenderElement: {
        prototype: HTMLFrameBenderElement;
        new (): HTMLFrameBenderElement;
    };
    interface HTMLGridBenderElement extends Components.GridBender, HTMLStencilElement {
    }
    var HTMLGridBenderElement: {
        prototype: HTMLGridBenderElement;
        new (): HTMLGridBenderElement;
    };
    interface HTMLHelpMessageBenderElement extends Components.HelpMessageBender, HTMLStencilElement {
    }
    var HTMLHelpMessageBenderElement: {
        prototype: HTMLHelpMessageBenderElement;
        new (): HTMLHelpMessageBenderElement;
    };
    interface HTMLLabelBenderElement extends Components.LabelBender, HTMLStencilElement {
    }
    var HTMLLabelBenderElement: {
        prototype: HTMLLabelBenderElement;
        new (): HTMLLabelBenderElement;
    };
    interface HTMLReelBenderElement extends Components.ReelBender, HTMLStencilElement {
    }
    var HTMLReelBenderElement: {
        prototype: HTMLReelBenderElement;
        new (): HTMLReelBenderElement;
    };
    interface HTMLSidebarBenderElement extends Components.SidebarBender, HTMLStencilElement {
    }
    var HTMLSidebarBenderElement: {
        prototype: HTMLSidebarBenderElement;
        new (): HTMLSidebarBenderElement;
    };
    interface HTMLSiteBenderElement extends Components.SiteBender, HTMLStencilElement {
    }
    var HTMLSiteBenderElement: {
        prototype: HTMLSiteBenderElement;
        new (): HTMLSiteBenderElement;
    };
    interface HTMLStackBenderElement extends Components.StackBender, HTMLStencilElement {
    }
    var HTMLStackBenderElement: {
        prototype: HTMLStackBenderElement;
        new (): HTMLStackBenderElement;
    };
    interface HTMLSwitcherBenderElement extends Components.SwitcherBender, HTMLStencilElement {
    }
    var HTMLSwitcherBenderElement: {
        prototype: HTMLSwitcherBenderElement;
        new (): HTMLSwitcherBenderElement;
    };
    interface HTMLTextFieldBenderElement extends Components.TextFieldBender, HTMLStencilElement {
    }
    var HTMLTextFieldBenderElement: {
        prototype: HTMLTextFieldBenderElement;
        new (): HTMLTextFieldBenderElement;
    };
    interface HTMLTextInputBenderElement extends Components.TextInputBender, HTMLStencilElement {
    }
    var HTMLTextInputBenderElement: {
        prototype: HTMLTextInputBenderElement;
        new (): HTMLTextInputBenderElement;
    };
    interface HTMLTopperBenderElement extends Components.TopperBender, HTMLStencilElement {
    }
    var HTMLTopperBenderElement: {
        prototype: HTMLTopperBenderElement;
        new (): HTMLTopperBenderElement;
    };
    interface HTMLElementTagNameMap {
        "box-bender": HTMLBoxBenderElement;
        "center-bender": HTMLCenterBenderElement;
        "cluster-bender": HTMLClusterBenderElement;
        "cover-bender": HTMLCoverBenderElement;
        "field-wrapper-bender": HTMLFieldWrapperBenderElement;
        "frame-bender": HTMLFrameBenderElement;
        "grid-bender": HTMLGridBenderElement;
        "help-message-bender": HTMLHelpMessageBenderElement;
        "label-bender": HTMLLabelBenderElement;
        "reel-bender": HTMLReelBenderElement;
        "sidebar-bender": HTMLSidebarBenderElement;
        "site-bender": HTMLSiteBenderElement;
        "stack-bender": HTMLStackBenderElement;
        "switcher-bender": HTMLSwitcherBenderElement;
        "text-field-bender": HTMLTextFieldBenderElement;
        "text-input-bender": HTMLTextInputBenderElement;
        "topper-bender": HTMLTopperBenderElement;
    }
}
declare namespace LocalJSX {
    interface BoxBender {
        /**
          * A box layout component
         */
        "config"?: BoxProps;
    }
    interface CenterBender {
        /**
          * A center layout component
         */
        "config"?: CenterProps;
    }
    interface ClusterBender {
        /**
          * A cluster layout component
         */
        "config"?: ClusterProps;
    }
    interface CoverBender {
        /**
          * A cover layout component
         */
        "config"?: CoverProps;
    }
    interface FieldWrapperBender {
        "componentId": string;
        /**
          * A wrapper around a form field
         */
        "helpVariant"?: LabelPosition;
        "label"?: string;
        "labelId"?: string;
        "message"?: string;
        "variant"?: LabelPosition;
    }
    interface FrameBender {
        /**
          * A frame layout component
         */
        "config"?: FrameProps;
    }
    interface GridBender {
        /**
          * A grid layout component
         */
        "config"?: GridProps;
    }
    interface HelpMessageBender {
        /**
          * A help message for a form field
         */
        "labelledBy"?: string;
        "message"?: string;
        "variant"?: LabelPosition;
    }
    interface LabelBender {
        "label"?: string;
        /**
          * A label for an element
         */
        "labelledId"?: string;
        "variant"?: LabelPosition;
    }
    interface ReelBender {
        /**
          * A reel layout component
         */
        "config"?: ReelProps;
    }
    interface SidebarBender {
        /**
          * A sidebar layout component
         */
        "config"?: SidebarProps;
    }
    interface SiteBender {
        /**
          * The unique train-case page name
         */
        "page"?: string;
    }
    interface StackBender {
        /**
          * A stack layout component
         */
        "config"?: StackProps;
    }
    interface SwitcherBender {
        /**
          * A switcher layout component
         */
        "config"?: SwitcherProps;
    }
    interface TextFieldBender {
        "componentId": string;
        /**
          * A text input element
         */
        "defaultValue"?: string;
        "label"?: string;
        "labelledBy"?: string;
        "message"?: string;
        "name": string;
    }
    interface TextInputBender {
        "componentId": string;
        /**
          * A text input element
         */
        "defaultValue"?: string;
        "labelledBy"?: string;
        "name": string;
    }
    interface TopperBender {
        /**
          * A topper layout component
         */
        "config"?: TopperProps;
    }
    interface IntrinsicElements {
        "box-bender": BoxBender;
        "center-bender": CenterBender;
        "cluster-bender": ClusterBender;
        "cover-bender": CoverBender;
        "field-wrapper-bender": FieldWrapperBender;
        "frame-bender": FrameBender;
        "grid-bender": GridBender;
        "help-message-bender": HelpMessageBender;
        "label-bender": LabelBender;
        "reel-bender": ReelBender;
        "sidebar-bender": SidebarBender;
        "site-bender": SiteBender;
        "stack-bender": StackBender;
        "switcher-bender": SwitcherBender;
        "text-field-bender": TextFieldBender;
        "text-input-bender": TextInputBender;
        "topper-bender": TopperBender;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "box-bender": LocalJSX.BoxBender & JSXBase.HTMLAttributes<HTMLBoxBenderElement>;
            "center-bender": LocalJSX.CenterBender & JSXBase.HTMLAttributes<HTMLCenterBenderElement>;
            "cluster-bender": LocalJSX.ClusterBender & JSXBase.HTMLAttributes<HTMLClusterBenderElement>;
            "cover-bender": LocalJSX.CoverBender & JSXBase.HTMLAttributes<HTMLCoverBenderElement>;
            "field-wrapper-bender": LocalJSX.FieldWrapperBender & JSXBase.HTMLAttributes<HTMLFieldWrapperBenderElement>;
            "frame-bender": LocalJSX.FrameBender & JSXBase.HTMLAttributes<HTMLFrameBenderElement>;
            "grid-bender": LocalJSX.GridBender & JSXBase.HTMLAttributes<HTMLGridBenderElement>;
            "help-message-bender": LocalJSX.HelpMessageBender & JSXBase.HTMLAttributes<HTMLHelpMessageBenderElement>;
            "label-bender": LocalJSX.LabelBender & JSXBase.HTMLAttributes<HTMLLabelBenderElement>;
            "reel-bender": LocalJSX.ReelBender & JSXBase.HTMLAttributes<HTMLReelBenderElement>;
            "sidebar-bender": LocalJSX.SidebarBender & JSXBase.HTMLAttributes<HTMLSidebarBenderElement>;
            "site-bender": LocalJSX.SiteBender & JSXBase.HTMLAttributes<HTMLSiteBenderElement>;
            "stack-bender": LocalJSX.StackBender & JSXBase.HTMLAttributes<HTMLStackBenderElement>;
            "switcher-bender": LocalJSX.SwitcherBender & JSXBase.HTMLAttributes<HTMLSwitcherBenderElement>;
            "text-field-bender": LocalJSX.TextFieldBender & JSXBase.HTMLAttributes<HTMLTextFieldBenderElement>;
            "text-input-bender": LocalJSX.TextInputBender & JSXBase.HTMLAttributes<HTMLTextInputBenderElement>;
            "topper-bender": LocalJSX.TopperBender & JSXBase.HTMLAttributes<HTMLTopperBenderElement>;
        }
    }
}
